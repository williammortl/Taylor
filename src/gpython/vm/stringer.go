// Copyright 2018 The go-python Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// generated by stringer -type=vmStatus,OpCode -output stringer.go; DO NOT EDIT

package vm

import "fmt"

const _vmStatus_name = "whyNotwhyExceptionwhyReturnwhyBreakwhyContinuewhyYieldwhySilenced"

var _vmStatus_index = [...]uint8{0, 6, 18, 27, 35, 46, 54, 65}

func (i vmStatus) String() string {
	if i+1 >= vmStatus(len(_vmStatus_index)) {
		return fmt.Sprintf("vmStatus(%d)", i)
	}
	return _vmStatus_name[_vmStatus_index[i]:_vmStatus_index[i+1]]
}

const _OpCode_name = "POP_TOPROT_TWOROT_THREEDUP_TOPDUP_TOP_TWONOPUNARY_POSITIVEUNARY_NEGATIVEUNARY_NOTUNARY_INVERTBINARY_POWERBINARY_MULTIPLYBINARY_MODULOBINARY_ADDBINARY_SUBTRACTBINARY_SUBSCRBINARY_FLOOR_DIVIDEBINARY_TRUE_DIVIDEINPLACE_FLOOR_DIVIDEINPLACE_TRUE_DIVIDESTORE_MAPINPLACE_ADDINPLACE_SUBTRACTINPLACE_MULTIPLYINPLACE_MODULOSTORE_SUBSCRDELETE_SUBSCRBINARY_LSHIFTBINARY_RSHIFTBINARY_ANDBINARY_XORBINARY_ORINPLACE_POWERGET_ITERPRINT_EXPRLOAD_BUILD_CLASSYIELD_FROMINPLACE_LSHIFTINPLACE_RSHIFTINPLACE_ANDINPLACE_XORINPLACE_ORBREAK_LOOPWITH_CLEANUPRETURN_VALUEIMPORT_STARYIELD_VALUEPOP_BLOCKEND_FINALLYPOP_EXCEPTHAVE_ARGUMENTDELETE_NAMEUNPACK_SEQUENCEFOR_ITERUNPACK_EXSTORE_ATTRDELETE_ATTRSTORE_GLOBALDELETE_GLOBALLOAD_CONSTLOAD_NAMEBUILD_TUPLEBUILD_LISTBUILD_SETBUILD_MAPLOAD_ATTRCOMPARE_OPIMPORT_NAMEIMPORT_FROMJUMP_FORWARDJUMP_IF_FALSE_OR_POPJUMP_IF_TRUE_OR_POPJUMP_ABSOLUTEPOP_JUMP_IF_FALSEPOP_JUMP_IF_TRUELOAD_GLOBALCONTINUE_LOOPSETUP_LOOPSETUP_EXCEPTSETUP_FINALLYLOAD_FASTSTORE_FASTDELETE_FASTRAISE_VARARGSCALL_FUNCTIONMAKE_FUNCTIONBUILD_SLICEMAKE_CLOSURELOAD_CLOSURELOAD_DEREFSTORE_DEREFDELETE_DEREFCALL_FUNCTION_VARCALL_FUNCTION_KWCALL_FUNCTION_VAR_KWSETUP_WITHEXTENDED_ARGLIST_APPENDSET_ADDMAP_ADDLOAD_CLASSDEREF"

var _OpCode_map = map[OpCode]string{
	1:   _OpCode_name[0:7],
	2:   _OpCode_name[7:14],
	3:   _OpCode_name[14:23],
	4:   _OpCode_name[23:30],
	5:   _OpCode_name[30:41],
	9:   _OpCode_name[41:44],
	10:  _OpCode_name[44:58],
	11:  _OpCode_name[58:72],
	12:  _OpCode_name[72:81],
	15:  _OpCode_name[81:93],
	19:  _OpCode_name[93:105],
	20:  _OpCode_name[105:120],
	22:  _OpCode_name[120:133],
	23:  _OpCode_name[133:143],
	24:  _OpCode_name[143:158],
	25:  _OpCode_name[158:171],
	26:  _OpCode_name[171:190],
	27:  _OpCode_name[190:208],
	28:  _OpCode_name[208:228],
	29:  _OpCode_name[228:247],
	54:  _OpCode_name[247:256],
	55:  _OpCode_name[256:267],
	56:  _OpCode_name[267:283],
	57:  _OpCode_name[283:299],
	59:  _OpCode_name[299:313],
	60:  _OpCode_name[313:325],
	61:  _OpCode_name[325:338],
	62:  _OpCode_name[338:351],
	63:  _OpCode_name[351:364],
	64:  _OpCode_name[364:374],
	65:  _OpCode_name[374:384],
	66:  _OpCode_name[384:393],
	67:  _OpCode_name[393:406],
	68:  _OpCode_name[406:414],
	70:  _OpCode_name[414:424],
	71:  _OpCode_name[424:440],
	72:  _OpCode_name[440:450],
	75:  _OpCode_name[450:464],
	76:  _OpCode_name[464:478],
	77:  _OpCode_name[478:489],
	78:  _OpCode_name[489:500],
	79:  _OpCode_name[500:510],
	80:  _OpCode_name[510:520],
	81:  _OpCode_name[520:532],
	83:  _OpCode_name[532:544],
	84:  _OpCode_name[544:555],
	86:  _OpCode_name[555:566],
	87:  _OpCode_name[566:575],
	88:  _OpCode_name[575:586],
	89:  _OpCode_name[586:596],
	90:  _OpCode_name[596:609],
	91:  _OpCode_name[609:620],
	92:  _OpCode_name[620:635],
	93:  _OpCode_name[635:643],
	94:  _OpCode_name[643:652],
	95:  _OpCode_name[652:662],
	96:  _OpCode_name[662:673],
	97:  _OpCode_name[673:685],
	98:  _OpCode_name[685:698],
	100: _OpCode_name[698:708],
	101: _OpCode_name[708:717],
	102: _OpCode_name[717:728],
	103: _OpCode_name[728:738],
	104: _OpCode_name[738:747],
	105: _OpCode_name[747:756],
	106: _OpCode_name[756:765],
	107: _OpCode_name[765:775],
	108: _OpCode_name[775:786],
	109: _OpCode_name[786:797],
	110: _OpCode_name[797:809],
	111: _OpCode_name[809:829],
	112: _OpCode_name[829:848],
	113: _OpCode_name[848:861],
	114: _OpCode_name[861:878],
	115: _OpCode_name[878:894],
	116: _OpCode_name[894:905],
	119: _OpCode_name[905:918],
	120: _OpCode_name[918:928],
	121: _OpCode_name[928:940],
	122: _OpCode_name[940:953],
	124: _OpCode_name[953:962],
	125: _OpCode_name[962:972],
	126: _OpCode_name[972:983],
	130: _OpCode_name[983:996],
	131: _OpCode_name[996:1009],
	132: _OpCode_name[1009:1022],
	133: _OpCode_name[1022:1033],
	134: _OpCode_name[1033:1045],
	135: _OpCode_name[1045:1057],
	136: _OpCode_name[1057:1067],
	137: _OpCode_name[1067:1078],
	138: _OpCode_name[1078:1090],
	140: _OpCode_name[1090:1107],
	141: _OpCode_name[1107:1123],
	142: _OpCode_name[1123:1143],
	143: _OpCode_name[1143:1153],
	144: _OpCode_name[1153:1165],
	145: _OpCode_name[1165:1176],
	146: _OpCode_name[1176:1183],
	147: _OpCode_name[1183:1190],
	148: _OpCode_name[1190:1205],
}

func (i OpCode) String() string {
	if str, ok := _OpCode_map[i]; ok {
		return str
	}
	return fmt.Sprintf("OpCode(%d)", i)
}
